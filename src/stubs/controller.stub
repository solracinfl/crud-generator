<?php

namespace DummyNamespace;

use DummyRootNamespaceHttp\Requests;
use DummyRootNamespaceHttp\Controllers\Controller;

use DummyRootNamespaceModels\{{crudNamePluralCap}};
use App\Http\Requests\{{crudNamePluralCap}}Request;

use DB;
use Cookie;
use Auth;
use Carbon\Carbon;
use App\Helpers\Helper;



class DummyClass extends Controller
{
	public function __construct()
    {
        $this->middleware('auth');
        $this->middleware('checkpermission');

    }

	/**
	 * Display a listing of the resource.
	 *
	 * @return Response
	 */
	public function index()
	{
		${{crudNamePlural}} = Helper::get{{crudNamePluralCap}}();
		return view('{{crudName}}.index', compact('{{crudNamePlural}}'));
	}

	/**
	 * Show the form for creating a new resource.
	 *
	 * @return Response
	 */
	public function create()
	{
		return view('{{crudName}}.create');
	}

	/**
	 * Store a newly created resource in storage.
	 *
	 * @return Response
	 */
	public function store({{crudNamePluralCap}}Request $request)
	{
        {{FacilityChild}}

		{{crudNamePluralCap}}::create($request->all());
		return redirect('{{crudName}}');
	}

	/**
	 * Display the specified resource.
	 *
	 * @param  int  $id
	 * @return Response
	 */
	public function show($id)
	{
		${{crudNameSingular}} = {{crudNamePluralCap}}::findOrFail($id);
		return view('{{crudName}}.show', compact('{{crudNameSingular}}'));
	}

	/**
	 * Show the form for editing the specified resource.
	 *
	 * @param  int  $id
	 * @return Response
	 */
	public function edit($id)
	{
		${{crudNameSingular}} = {{crudNamePluralCap}}::findOrFail($id);
		return view('{{crudName}}.edit', compact('{{crudNameSingular}}'));
	}

	/**
	 * Update the specified resource in storage.
	 *
	 * @param  int  $id
	 * @return Response
	 */
	public function update($id, {{crudNamePluralCap}}Request $request)
	{
		//$this->validate($request, ['name' => 'required']); // Uncomment and modify if needed.
		${{crudNameSingular}} = {{crudNamePluralCap}}::findOrFail($id);
		${{crudNameSingular}}->update($request->all());
		return redirect('{{crudName}}');
	}

	/**
	 * Remove the specified resource from storage.
	 *
	 * @param  int  $id
	 * @return Response
	 */
	public function destroy($id)
	{
		try {
			{{crudNamePluralCap}}::destroy($id);
			return redirect('{{crudName}}');

		} catch (\Exception $e) {
            return redirect()->back()
                ->withInput()
                ->withErrors('Record cannot be deleted, the record has other records that depend on it.');
		}


	}

}
